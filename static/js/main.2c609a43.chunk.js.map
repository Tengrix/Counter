{"version":3,"sources":["App.module.css","Counter.tsx","redux/counter-reducer.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","Counter","props","counterClassName","counter","s","className","App","newCounter","btn","disabled","onClick","increase","reset","useSelector","state","dispatch","useDispatch","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uIACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,qBAAqB,IAAM,iBAAiB,WAAa,0B,gHC0B7FC,MAhBf,SAAiBC,GACb,IAAIC,EAAqC,IAAlBD,EAAME,QAAgBC,IAAED,QAAU,GACzD,OACI,sBAAKE,UAAWD,IAAEE,IAAlB,UACI,qBAAKD,UAAWH,EAAhB,SACI,oBAAIG,UAAWD,IAAEG,WAAjB,SAA8BN,EAAME,YAExC,+BACJ,wBAAQE,UAAWD,IAAEI,IAAKC,SAA4B,IAAlBR,EAAME,QAAeO,QAAS,WAAKT,EAAMU,YAA7E,mBAEI,wBAAQN,UAAWD,IAAEI,IAAKC,SAA4B,IAAlBR,EAAME,QAAeO,QAAS,WAAKT,EAAMW,SAA7E,uB,OCVRT,EAAU,ECiBCG,MArBf,WAEI,IAAMH,EAAUU,aAA2C,SAAAC,GAAK,OAAIA,EAAMX,WACpEY,EAAWC,cAQjB,OACI,8BACI,cAAC,EAAD,CAASb,QAASA,EACTQ,SATA,WACbI,EDaG,CAAEE,KAAK,qBCJGL,MAPH,WACVG,EDaG,CAAEE,KAAK,uBEfHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCNRQ,EAAcC,YAAgB,CAChCzB,QHQ0B,WAAwD,IAAvDW,EAAsD,uDAFpD,EAEgCe,EAAoB,uCACjF,OAAQA,EAAOZ,MACX,IAAK,kBAID,OAHGH,EAAQ,IACRX,EAAUW,EAAQ,GAEdX,EACX,IAAK,eACD,OAAOA,EACX,QACI,OAAOW,MGfRgB,EAAQC,YAAYJ,GCC/BK,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACI,cAAC,EAAD,QAIRK,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.2c609a43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3d-Ga\",\"counter\":\"App_counter__32UyR\",\"btn\":\"App_btn__1tnPx\",\"newCounter\":\"App_newCounter__3V06B\"};","import React from 'react';\nimport './App.css';\nimport s from './App.module.css'\nimport {CounterType} from \"./redux/counter-reducer\";\n\ntype counterType = {\n    counter: CounterType;\n    increase: () => void\n    reset: () => void;\n}\n\nfunction Counter(props: counterType) {\n    let counterClassName = props.counter === 5 ? s.counter : ''\n    return (\n        <div className={s.App}>\n            <div className={counterClassName}>\n                <h3 className={s.newCounter}>{props.counter}</h3>\n            </div>\n            <span>\n        <button className={s.btn} disabled={props.counter === 5} onClick={()=>{props.increase()}}>inc</button>\n      </span>\n            <button className={s.btn} disabled={props.counter === 0} onClick={()=>{props.reset()}}>reset\n            </button>\n        </div>\n    );\n}\n\nexport default Counter;\n","\r\nexport type CounterType = number\r\nexport type CounterAT = IncreaseAT | ResetAT\r\nexport type IncreaseAT = {\r\n    type: 'INCREASE-NUMBER';\r\n};\r\nexport type ResetAT = {\r\n    type: 'RESET-NUMBER';\r\n\r\n}\r\nconst initialState:CounterType = 0\r\nlet counter = 0\r\nexport const counterReducer = (state:CounterType = initialState, action:CounterAT) =>{\r\n    switch (action.type){\r\n        case \"INCREASE-NUMBER\":\r\n            if(state < 5){\r\n               counter = state + 1\r\n            }\r\n            return counter\r\n        case \"RESET-NUMBER\":\r\n            return counter\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const increaseAC = ():IncreaseAT => {\r\n    return { type:\"INCREASE-NUMBER\" }\r\n}\r\nexport const resetAC = ():ResetAT =>{\r\n    return { type:\"RESET-NUMBER\" }\r\n}","import React from 'react';\nimport Counter from \"./Counter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./redux/store\";\nimport {CounterType, increaseAC, resetAC} from \"./redux/counter-reducer\";\n\n\nfunction App() {\n\n    const counter = useSelector<AppRootStateType, CounterType>(state => state.counter)\n    const dispatch = useDispatch()\n\n    const increase = () => {\n        dispatch(increaseAC())\n    }\n    const reset = () => {\n        dispatch(resetAC())\n    }\n    return (\n        <div>\n            <Counter counter={counter}\n                     increase={increase}\n                     reset={reset}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport let store = createStore(rootReducer)\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}